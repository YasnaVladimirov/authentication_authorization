{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Link } from \"react-router-dom\";\nimport * as yup from 'yup';\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nfunction Register() {\n  _s();\n  const usernameRef = useRef();\n  const errRef = useRef();\n\n  // const [username, setUsername] = useState(\"\");\n  // const [validUsername, setValidUsername] = useState(false);\n  // const [userFocus, setUserFocus] = useState(false);\n\n  // const [password, setPassword] = useState(\"\");\n  // const [validPassword, setValidPassword] = useState(false);\n  // const [pswFocus, setPswFocus] = useState(false);\n\n  // const [matchPassword, setMatchPassword] = useState(\"\");\n  // const [validMatch, setValidMatch] = useState(false);\n  // const [matchPswFocus, setMatchPswFocus] = useState(false);\n\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    matchPassword: \"\"\n  });\n  const [validation, setValidation] = useState({\n    validUsername: false,\n    validPassword: false,\n    validMatch: false\n  });\n  const [focus, setFocus] = useState({\n    userFocus: false,\n    pswFocus: false,\n    matchPswFocus: false\n  });\n  const [errMsg, setErrMsg] = useState([]);\n\n  // useEffect(() => {\n  //   usernameRef.current.focus();\n  // }, []);\n\n  // useEffect(() => {\n  //   schema.validate({ username }).then(() => {\n  //     setValidUsername(true);\n  //   }).catch(() => {\n  //     setValidUsername(false);\n  //   });\n  //   console.log(validUsername);\n\n  //   //setValidUsername(USER_REGEX.test(username));\n  // }, [username])\n\n  // useEffect(() => {\n  //   schema.validate({ password }).then(() => {\n  //     setValidPassword(true);\n  //   }).catch(() => {\n  //     setValidPassword(false);\n  //   });\n  //   console.log(validPassword);\n\n  //   //setValidPassword(PWD_REGEX.test(password))\n  //   //setValidMatch(password === matchPassword);\n  // }, [password, matchPassword])\n\n  // useEffect(() => {\n  //   schema.validate({ password }).then(() => {\n  //     setValidMatch(true);\n  //   }).catch(() => {\n  //     setValidMatch(false);\n  //   });\n  //   console.log(validMatch);\n  // }, [matchPassword])\n\n  useEffect(() => {\n    schema.validate(formData, {\n      abortEarly: false\n    }).then(() => {\n      setValidation({\n        validUsername: true,\n        validPassword: true,\n        validMatch: true\n      });\n    }).catch(validationErrors => {\n      setValidation({\n        validUsername: false,\n        validPassword: false,\n        validMatch: false\n      });\n      setErrMsg(validationErrors.errors);\n    });\n  }, [formData, schema]);\n  useEffect(() => {\n    setErrMsg('');\n  }, [username, password, matchPassword]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const schema = yup.object().shape({\n    username: yup.string().min(3, \"Username must be at least 3 characters\").max(23, \"Username must be at most 23 characters\").required(\"Username is required!\"),\n    password: yup.string().min(5, \"Password must be at least 5 characters\").max(24, \"Password must be at most 24 characters\").required(\"Password is required!\").matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%])$/, 'Password must contain at least one capital letter, one number, and one of !@#$%'),\n    matchPassword: yup.string().oneOf([yup.ref(\"password\")], \"Passwords must match\").required('Confirm password is required')\n  });\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"Subbmited\");\n  }\n\n  // return (\n  //   <div className='container'>\n  //     {errMsg && errMsg.map((error) => (\n  //       <p ref={errRef} className=\"errmsg\" aria-live=\"assertive\">{error}</p>\n  //     ))}\n  //     <h1>Register</h1>\n  //     <form>\n  //       <label htmlFor='username'>\n  //         Username:\n  //         <FontAwesomeIcon icon={faCheck} className={validUsername ? \"valid\" : \"hide\"} />\n  //         <FontAwesomeIcon icon={faTimes} className={validUsername || !username ? \"hide\" : \"invalid\"} />\n  //       </label>\n  //       <input\n  //         id='username'\n  //         ref={usernameRef}\n  //         type='text'\n  //         name='username'\n  //         autoComplete=\"off\"\n  //         onChange={(e) => setUsername(e.target.value)}\n  //         onFocus={() => setUserFocus(true)}\n  //         onBlur={() => setUserFocus(false)}\n  //       />\n  //       <p className={userFocus && username && !validUsername ? \"instructions\" : \"hide\"}>\n  //         <FontAwesomeIcon icon={faInfoCircle} />\n  //         4 to 24 characters.<br />\n  //         Must begin with a letter.<br />\n  //         Letters, numbers, underscores, hyphens allowed.\n  //       </p>\n\n  //       <label htmlFor='password'>\n  //         Password:\n  //         <FontAwesomeIcon icon={faCheck} className={validPassword ? \"valid\" : \"hide\"} />\n  //         <FontAwesomeIcon icon={faTimes} className={validPassword || !password ? \"hide\" : \"invalid\"} />\n  //       </label>\n  //       <input\n  //         id='password'\n  //         type='password'\n  //         name='password'\n\n  //         onChange={(e) => setPassword(e.target.value)}\n  //         onFocus={() => setPswFocus(true)}\n  //         onBlur={() => setPswFocus(false)}\n  //       />\n  //       <p className={pswFocus && password && !validPassword ? \"instructions\" : \"hide\"}>\n  //         <FontAwesomeIcon icon={faInfoCircle} />\n  //         5 to 24 characters.<br />\n  //         Must include uppercase and lowercase letters, a number and a special character.<br />\n  //         Allowed special characters: !@#$%\n  //       </p>\n\n  //       <label htmlFor='matchPassword'>\n  //         Confirm Password:\n  //         <FontAwesomeIcon icon={faCheck} className={validMatch ? \"valid\" : \"hide\"} />\n  //         <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPassword ? \"hide\" : \"invalid\"} />\n  //       </label>\n  //       <input\n  //         id='matchPassword'\n  //         type='password'\n  //         name='matchPassword'\n\n  //         onChange={(e) => setMatchPassword(e.target.value)}\n  //         onFocus={() => setMatchPswFocus(true)}\n  //         onBlur={() => setMatchPswFocus(false)}\n  //       />\n  //       <p className={matchPswFocus && matchPassword && !validMatch ? \"instructions\" : \"hide\"}>\n  //         <FontAwesomeIcon icon={faInfoCircle} />\n  //         Must match the first password input field.\n  //       </p>\n\n  //       <button disabled={!validUsername || !validPassword || !validMatch ? true : false} onClick={handleSubmit}>Sign Up</button>\n  //       <p>Already registered?</p>\n  //       <Link to=\"/login\" className='link'>Sign in</Link>\n  //     </form>\n  //   </div>\n  //)\n}\n_s(Register, \"5mcqkpOMTEtlP1Ytchr03IDSrNY=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Link","yup","faCheck","faTimes","faInfoCircle","FontAwesomeIcon","USER_REGEX","PWD_REGEX","Register","_s","usernameRef","errRef","formData","setFormData","username","password","matchPassword","validation","setValidation","validUsername","validPassword","validMatch","focus","setFocus","userFocus","pswFocus","matchPswFocus","errMsg","setErrMsg","schema","validate","abortEarly","then","catch","validationErrors","errors","handleChange","e","name","value","target","prevData","object","shape","string","min","max","required","matches","oneOf","ref","handleSubmit","preventDefault","console","log","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/js/react-apps/react-auth/client/src/pages/Register.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport * as yup from 'yup';\r\nimport { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n\r\nfunction Register() {\r\n  const usernameRef = useRef();\r\n  const errRef = useRef();\r\n\r\n  // const [username, setUsername] = useState(\"\");\r\n  // const [validUsername, setValidUsername] = useState(false);\r\n  // const [userFocus, setUserFocus] = useState(false);\r\n\r\n  // const [password, setPassword] = useState(\"\");\r\n  // const [validPassword, setValidPassword] = useState(false);\r\n  // const [pswFocus, setPswFocus] = useState(false);\r\n\r\n  // const [matchPassword, setMatchPassword] = useState(\"\");\r\n  // const [validMatch, setValidMatch] = useState(false);\r\n  // const [matchPswFocus, setMatchPswFocus] = useState(false);\r\n\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    matchPassword: \"\",\r\n  });\r\n\r\n  const [validation, setValidation] = useState({\r\n    validUsername: false,\r\n    validPassword: false,\r\n    validMatch: false,\r\n  });\r\n\r\n  const [focus, setFocus] = useState({\r\n    userFocus: false,\r\n    pswFocus: false,\r\n    matchPswFocus: false,\r\n  });\r\n\r\n\r\n  const [errMsg, setErrMsg] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   usernameRef.current.focus();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   schema.validate({ username }).then(() => {\r\n  //     setValidUsername(true);\r\n  //   }).catch(() => {\r\n  //     setValidUsername(false);\r\n  //   });\r\n  //   console.log(validUsername);\r\n\r\n  //   //setValidUsername(USER_REGEX.test(username));\r\n  // }, [username])\r\n\r\n  // useEffect(() => {\r\n  //   schema.validate({ password }).then(() => {\r\n  //     setValidPassword(true);\r\n  //   }).catch(() => {\r\n  //     setValidPassword(false);\r\n  //   });\r\n  //   console.log(validPassword);\r\n\r\n  //   //setValidPassword(PWD_REGEX.test(password))\r\n  //   //setValidMatch(password === matchPassword);\r\n  // }, [password, matchPassword])\r\n\r\n  // useEffect(() => {\r\n  //   schema.validate({ password }).then(() => {\r\n  //     setValidMatch(true);\r\n  //   }).catch(() => {\r\n  //     setValidMatch(false);\r\n  //   });\r\n  //   console.log(validMatch);\r\n  // }, [matchPassword])\r\n\r\n  useEffect(() => {\r\n    schema\r\n      .validate(formData, { abortEarly: false })\r\n      .then(() => {\r\n        setValidation({\r\n          validUsername: true,\r\n          validPassword: true,\r\n          validMatch: true,\r\n        });\r\n      })\r\n      .catch((validationErrors) => {\r\n        setValidation({\r\n          validUsername: false,\r\n          validPassword: false,\r\n          validMatch: false,\r\n        });\r\n        setErrMsg(validationErrors.errors);\r\n      });\r\n  }, [formData, schema]);\r\n\r\n  useEffect(() => {\r\n    setErrMsg('');\r\n  }, [username, password, matchPassword])\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const schema = yup.object().shape({\r\n    username: yup\r\n      .string()\r\n      .min(3, \"Username must be at least 3 characters\")\r\n      .max(23, \"Username must be at most 23 characters\")\r\n      .required(\"Username is required!\"),\r\n    password: yup\r\n      .string()\r\n      .min(5, \"Password must be at least 5 characters\")\r\n      .max(24, \"Password must be at most 24 characters\")\r\n      .required(\"Password is required!\")\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%])$/,\r\n        'Password must contain at least one capital letter, one number, and one of !@#$%'\r\n      ),\r\n    matchPassword: yup\r\n      .string()\r\n      .oneOf([yup.ref(\"password\")], \"Passwords must match\")\r\n      .required('Confirm password is required'),\r\n  });\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    console.log(\"Subbmited\");\r\n  }\r\n\r\n\r\n\r\n  // return (\r\n  //   <div className='container'>\r\n  //     {errMsg && errMsg.map((error) => (\r\n  //       <p ref={errRef} className=\"errmsg\" aria-live=\"assertive\">{error}</p>\r\n  //     ))}\r\n  //     <h1>Register</h1>\r\n  //     <form>\r\n  //       <label htmlFor='username'>\r\n  //         Username:\r\n  //         <FontAwesomeIcon icon={faCheck} className={validUsername ? \"valid\" : \"hide\"} />\r\n  //         <FontAwesomeIcon icon={faTimes} className={validUsername || !username ? \"hide\" : \"invalid\"} />\r\n  //       </label>\r\n  //       <input\r\n  //         id='username'\r\n  //         ref={usernameRef}\r\n  //         type='text'\r\n  //         name='username'\r\n  //         autoComplete=\"off\"\r\n  //         onChange={(e) => setUsername(e.target.value)}\r\n  //         onFocus={() => setUserFocus(true)}\r\n  //         onBlur={() => setUserFocus(false)}\r\n  //       />\r\n  //       <p className={userFocus && username && !validUsername ? \"instructions\" : \"hide\"}>\r\n  //         <FontAwesomeIcon icon={faInfoCircle} />\r\n  //         4 to 24 characters.<br />\r\n  //         Must begin with a letter.<br />\r\n  //         Letters, numbers, underscores, hyphens allowed.\r\n  //       </p>\r\n\r\n  //       <label htmlFor='password'>\r\n  //         Password:\r\n  //         <FontAwesomeIcon icon={faCheck} className={validPassword ? \"valid\" : \"hide\"} />\r\n  //         <FontAwesomeIcon icon={faTimes} className={validPassword || !password ? \"hide\" : \"invalid\"} />\r\n  //       </label>\r\n  //       <input\r\n  //         id='password'\r\n  //         type='password'\r\n  //         name='password'\r\n\r\n  //         onChange={(e) => setPassword(e.target.value)}\r\n  //         onFocus={() => setPswFocus(true)}\r\n  //         onBlur={() => setPswFocus(false)}\r\n  //       />\r\n  //       <p className={pswFocus && password && !validPassword ? \"instructions\" : \"hide\"}>\r\n  //         <FontAwesomeIcon icon={faInfoCircle} />\r\n  //         5 to 24 characters.<br />\r\n  //         Must include uppercase and lowercase letters, a number and a special character.<br />\r\n  //         Allowed special characters: !@#$%\r\n  //       </p>\r\n\r\n  //       <label htmlFor='matchPassword'>\r\n  //         Confirm Password:\r\n  //         <FontAwesomeIcon icon={faCheck} className={validMatch ? \"valid\" : \"hide\"} />\r\n  //         <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPassword ? \"hide\" : \"invalid\"} />\r\n  //       </label>\r\n  //       <input\r\n  //         id='matchPassword'\r\n  //         type='password'\r\n  //         name='matchPassword'\r\n\r\n  //         onChange={(e) => setMatchPassword(e.target.value)}\r\n  //         onFocus={() => setMatchPswFocus(true)}\r\n  //         onBlur={() => setMatchPswFocus(false)}\r\n  //       />\r\n  //       <p className={matchPswFocus && matchPassword && !validMatch ? \"instructions\" : \"hide\"}>\r\n  //         <FontAwesomeIcon icon={faInfoCircle} />\r\n  //         Must match the first password input field.\r\n  //       </p>\r\n\r\n  //       <button disabled={!validUsername || !validPassword || !validMatch ? true : false} onClick={handleSubmit}>Sign Up</button>\r\n  //       <p>Already registered?</p>\r\n  //       <Link to=\"/login\" className='link'>Sign in</Link>\r\n  //     </form>\r\n  //   </div>\r\n  //)\r\n\r\n  \r\n}\r\n\r\nexport default Register"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}