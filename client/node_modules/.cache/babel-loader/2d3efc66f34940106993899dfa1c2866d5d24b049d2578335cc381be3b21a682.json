{"ast":null,"code":"// import axios from \"axios\";\n// import { useEffect } from \"react\";\n// import useAuth from \"./useAuth\";\n// import useRefreshToken from \"./useRefreshToken\";\n\n// const useAxiosPrivate = () => {\n//   const { auth } = useAuth();\n//   const refresh = useRefreshToken();\n//   const axiosPrivate = axios.create({\n//     baseURL: \"http://localhost:5000\",\n//     withCredentials: true\n//   });\n\n//   useEffect(() => {\n//     const requestIntercept = axiosPrivate.interceptors.request.use(\n//       (config) => {\n//         if (!config.headers['Authorization']) {\n//           config.headers['Authorization'] = `Bearer ${auth?.accessToken}`;\n//         }\n//         return config;\n//       },\n//       (error) => Promise.reject(error));\n\n//     const responseIntercept = axios.interceptors.response.use(\n//       (response) => {\n//         return response;\n//       }, async (error) => {\n//         const prevRequest = error?.config;\n//         if (error.response.status === 403 && !prevRequest.sent) {\n//           prevRequest.sent = true;\n//           const newAccessToken = await refresh();\n//           prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n//           return axiosPrivate(prevRequest);\n//         }\n//         return Promise.reject(error);\n//       });\n\n//     return () => {\n//       axiosPrivate.interceptors.request.eject(requestIntercept);\n//       axiosPrivate.interceptors.response.eject(responseIntercept);\n//     }\n//   }, [auth, refresh]);\n\n//   return axiosPrivate;\n// }\n\n// export default useAxiosPrivate;","map":{"version":3,"names":[],"sources":["C:/Users/User/Desktop/js/react-apps/react-auth/client/src/hooks/useAxiosPrivate.js"],"sourcesContent":["// import axios from \"axios\";\r\n// import { useEffect } from \"react\";\r\n// import useAuth from \"./useAuth\";\r\n// import useRefreshToken from \"./useRefreshToken\";\r\n\r\n// const useAxiosPrivate = () => {\r\n//   const { auth } = useAuth();\r\n//   const refresh = useRefreshToken();\r\n//   const axiosPrivate = axios.create({\r\n//     baseURL: \"http://localhost:5000\",\r\n//     withCredentials: true\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const requestIntercept = axiosPrivate.interceptors.request.use(\r\n//       (config) => {\r\n//         if (!config.headers['Authorization']) {\r\n//           config.headers['Authorization'] = `Bearer ${auth?.accessToken}`;\r\n//         }\r\n//         return config;\r\n//       },\r\n//       (error) => Promise.reject(error));\r\n\r\n//     const responseIntercept = axios.interceptors.response.use(\r\n//       (response) => {\r\n//         return response;\r\n//       }, async (error) => {\r\n//         const prevRequest = error?.config;\r\n//         if (error.response.status === 403 && !prevRequest.sent) {\r\n//           prevRequest.sent = true;\r\n//           const newAccessToken = await refresh();\r\n//           prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n//           return axiosPrivate(prevRequest);\r\n//         }\r\n//         return Promise.reject(error);\r\n//       });\r\n\r\n//     return () => {\r\n//       axiosPrivate.interceptors.request.eject(requestIntercept);\r\n//       axiosPrivate.interceptors.response.eject(responseIntercept);\r\n//     }\r\n//   }, [auth, refresh]);\r\n\r\n//   return axiosPrivate;\r\n// }\r\n\r\n// export default useAxiosPrivate;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}